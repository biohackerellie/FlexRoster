# .github/workflows/release.yml
name: Release

on:
  workflow_dispatch:
  push:
    branches: ["release"] 
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  REGISTRY: ghcr.io
  CLIENT_IMAGE_NAME: biohackerellie/flexclient
  SERVER_IMAGE_NAME: biohackerellie/flexserver
jobs:
  tag:
    permissions:
      contents: write
      id-token: write
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: 
        - 22
    steps: 
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Git
      run: |
        git config user.name "biohackerellie"
        git config user.email "ellie@epklabs.com"


    - name: Determine Current Branch
      id: current_branch
      run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV

    - name: Determine Version Bump
      id: version_bump
      run: |
        BUMP_TYPE="patch"
          for COMMIT in $(git log origin/${{ env.branch }}..HEAD --pretty=format:"%s"); do
            if [[ "$COMMIT" == *":major"* ]]; then
              BUMP_TYPE="major"
              break
            elif [[ "$COMMIT" == *":minor"* ]]; then
              if [[ "$BUMP_TYPE" != "major" ]]; then
                BUMP_TYPE="minor"
              fi
            elif [[ "$COMMIT" == *":patch"* ]]; then
              if [[ "$BUMP_TYPE" != "major" && "$BUMP_TYPE" != "minor" ]]; then
                BUMP_TYPE="patch"
              fi
            fi
          done

          echo "bump_type=$BUMP_TYPE" >> $GITHUB_ENV
          echo "::set-output name=bump_type::$BUMP_TYPE"
    - name: Get Latest Tag
      id: get_latest_tag
      run: |
        BRANCH=${{ env.branch }}
          if [ "$BRANCH" == "release" ]; then
            # Get the latest release tag matching vX.Y.Z
            TAG=$(git tag --list 'v*' --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          else
            # Get the latest tag for develop or canary matching vX.Y.Z-branch.N
            TAG=$(git tag --list "v*-$BRANCH.*" --sort=-v:refname | head -n 1)
          fi
          echo "latest_tag=$TAG" >> $GITHUB_ENV
          echo "::set-output name=latest_tag::$TAG"
    - name: Calculate Next Tag
      id: next_tag
      run: |
        BRANCH=${{ env.branch }}
          BUMP_TYPE=${{ env.bump_type }}
          CURRENT_TAG=${{ env.latest_tag }}

          if [ -z "$CURRENT_TAG" ]; then
            # No existing tags, start with v1.0.0 or v1.0.0-branch.1
            if [ "$BRANCH" == "release" ]; then
              NEXT_TAG="v1.0.0"
            else
              NEXT_TAG="v1.0.0-$BRANCH.1"
            fi
          else
            if [ "$BRANCH" == "release" ]; then
              # Extract X.Y.Z from the tag
              VERSION=$(echo $CURRENT_TAG | sed -E 's/^v([0-9]+\.[0-9]+\.[0-9]+)$/\1/')
              MAJOR=$(echo $VERSION | cut -d. -f1)
              MINOR=$(echo $VERSION | cut -d. -f2)
              PATCH=$(echo $VERSION | cut -d. -f3)

              if [ "$BUMP_TYPE" == "major" ]; then
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
              elif [ "$BUMP_TYPE" == "minor" ]; then
                MINOR=$((MINOR + 1))
                PATCH=0
              elif [ "$BUMP_TYPE" == "patch" ]; then
                PATCH=$((PATCH + 1))
              fi

              NEXT_TAG="v$MAJOR.$MINOR.$PATCH"
            else
              # Extract X.Y.Z-branch.N from the tag
              BASE_VERSION=$(echo $CURRENT_TAG | sed -E "s/^v([0-9]+\.[0-9]+\.[0-9]+)-$BRANCH\.[0-9]+$/\1/")
              CURRENT_SUFFIX=$(echo $CURRENT_TAG | sed -E "s/^v$BASE_VERSION-$BRANCH\.([0-9]+)$/\1/")
              NEXT_SUFFIX=$((CURRENT_SUFFIX + 1))
              NEXT_TAG="v$BASE_VERSION-$BRANCH.$NEXT_SUFFIX"
            fi
          fi

          echo "NEXT_TAG=$NEXT_TAG" >> $GITHUB_ENV
    - name: Push action
      run: |
        MERGE_COMMIT=$(git rev-parse HEAD)
        git tag -a "$NEXT_TAG" "$MERGE_COMMIT" -m "Tagging"
        git push origin release --tags
  goreleaser-api:
    needs: tag
    if: ${{ github.ref == 'refs/heads/release' }}
    permissions:
      contents: write
      id-token: write
      packages: write
    runs-on: ubuntu-latest
    steps:
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: true
          check-latest: true
      - uses: anchore/sbom-action/download-syft@v0.17.5
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: ${{ env.GITHUB_REF_NAME }}
          args: release --clean
          workdir: "./apps/api/"
            
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAPSTOKEN: ${{secrets.TAPSTOKEN}}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
  build-and-push-client:
    needs: tag
    if: ${{ github.ref == 'refs/heads/release' }}
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@5d8785b43a795ee002a17dbf1a2235dc1997224b
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@70b2cdc6480c1a8b86edf1777157f8f437de2166
        with:
          images: ${{ env.REGISTRY }}/${{ env.CLIENT_IMAGE_NAME}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/client/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.CLIENT_IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  build-and-push-server:
    needs: tag
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@5d8785b43a795ee002a17dbf1a2235dc1997224b
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@70b2cdc6480c1a8b86edf1777157f8f437de2166
        with:
          images: ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/server/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.SERVER_IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
