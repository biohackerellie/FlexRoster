// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForCreateAvailability implements pgx.CopyFromSource.
type iteratorForCreateAvailability struct {
	rows                 []CreateAvailabilityParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAvailability) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAvailability) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].TeacherId,
		r.rows[0].ClassroomId,
		r.rows[0].Date,
		r.rows[0].Available,
	}, nil
}

func (r iteratorForCreateAvailability) Err() error {
	return nil
}

func (q *Queries) CreateAvailability(ctx context.Context, arg []CreateAvailabilityParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"availability"}, []string{"id", "teacherId", "classroomId", "date", "available"}, &iteratorForCreateAvailability{rows: arg})
}

// iteratorForNewStudent implements pgx.CopyFromSource.
type iteratorForNewStudent struct {
	rows                 []NewStudentParams
	skippedFirstNextCall bool
}

func (r *iteratorForNewStudent) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForNewStudent) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].StudentEmail,
		r.rows[0].StudentName,
		r.rows[0].Status,
		r.rows[0].ClassroomId,
	}, nil
}

func (r iteratorForNewStudent) Err() error {
	return nil
}

func (q *Queries) NewStudent(ctx context.Context, arg []NewStudentParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"students"}, []string{"studentEmail", "studentName", "status", "classroomId"}, &iteratorForNewStudent{rows: arg})
}
