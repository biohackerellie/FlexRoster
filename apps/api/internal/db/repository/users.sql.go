// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getTeacher = `-- name: GetTeacher :one
SELECT "user".id, name, email, "emailVerified", image, role, classrooms.id, "roomNumber", "teacherName", "teacherId", comment, "isFlex" FROM "user"
LEFT JOIN "classrooms" ON "classrooms"."teacherId" = "user"."id"
WHERE "user"."id" = $1 LIMIT 1
`

type GetTeacherRow struct {
	ID            string
	Name          pgtype.Text
	Email         string
	EmailVerified pgtype.Timestamp
	Image         pgtype.Text
	Role          string
	ID_2          pgtype.Text
	RoomNumber    pgtype.Text
	TeacherName   pgtype.Text
	TeacherId     pgtype.Text
	Comment       pgtype.Text
	IsFlex        pgtype.Bool
}

func (q *Queries) GetTeacher(ctx context.Context, id string) (GetTeacherRow, error) {
	row := q.db.QueryRow(ctx, getTeacher, id)
	var i GetTeacherRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.Image,
		&i.Role,
		&i.ID_2,
		&i.RoomNumber,
		&i.TeacherName,
		&i.TeacherId,
		&i.Comment,
		&i.IsFlex,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT "id", "name", "email", "role"
FROM "user"
WHERE "id" = $1 LIMIT 1
`

type GetUserRow struct {
	ID    string
	Name  pgtype.Text
	Email string
	Role  string
}

func (q *Queries) GetUser(ctx context.Context, id string) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
	)
	return i, err
}

const userRosterQuery = `-- name: UserRosterQuery :many
SELECT "user".id, name, email, "emailVerified", image, role, "studentEmail", "studentName", "classroomId", status, students.id, classrooms.id, "roomNumber", "teacherName", "teacherId", comment, "isFlex" FROM "user"
JOIN "students" ON "students"."studentEmail" = "user"."email"
JOIN "classrooms" ON "classrooms"."id" = "students"."classroomId"
WHERE "user"."id" = $1
`

type UserRosterQueryRow struct {
	ID            string
	Name          pgtype.Text
	Email         string
	EmailVerified pgtype.Timestamp
	Image         pgtype.Text
	Role          string
	StudentEmail  string
	StudentName   string
	ClassroomId   string
	Status        interface{}
	ID_2          int32
	ID_3          string
	RoomNumber    string
	TeacherName   string
	TeacherId     pgtype.Text
	Comment       pgtype.Text
	IsFlex        pgtype.Bool
}

func (q *Queries) UserRosterQuery(ctx context.Context, id string) ([]UserRosterQueryRow, error) {
	rows, err := q.db.Query(ctx, userRosterQuery, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRosterQueryRow
	for rows.Next() {
		var i UserRosterQueryRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.EmailVerified,
			&i.Image,
			&i.Role,
			&i.StudentEmail,
			&i.StudentName,
			&i.ClassroomId,
			&i.Status,
			&i.ID_2,
			&i.ID_3,
			&i.RoomNumber,
			&i.TeacherName,
			&i.TeacherId,
			&i.Comment,
			&i.IsFlex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
