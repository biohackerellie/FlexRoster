// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: rosters.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const allStudentDetails = `-- name: AllStudentDetails :many
SELECT "studentEmail", "studentName", "classroomId", status, students.id, "user".id, name, email, "emailVerified", image, role, classrooms.id, "roomNumber", "teacherName", "teacherId", comment, "isFlex" FROM "students"
LEFT JOIN "user" ON "students"."studentEmail" = "user"."email"
LEFT JOIN "classrooms" ON "students"."classroomId" = "classrooms"."id"
WHERE "students"."id" = $1
`

type AllStudentDetailsRow struct {
	StudentEmail  string
	StudentName   string
	ClassroomId   string
	Status        Status
	ID            int32
	ID_2          pgtype.Text
	Name          pgtype.Text
	Email         pgtype.Text
	EmailVerified pgtype.Timestamp
	Image         pgtype.Text
	Role          pgtype.Text
	ID_3          pgtype.Text
	RoomNumber    pgtype.Text
	TeacherName   pgtype.Text
	TeacherId     pgtype.Text
	Comment       pgtype.Text
	IsFlex        pgtype.Bool
}

func (q *Queries) AllStudentDetails(ctx context.Context, id int32) ([]AllStudentDetailsRow, error) {
	rows, err := q.db.Query(ctx, allStudentDetails, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllStudentDetailsRow
	for rows.Next() {
		var i AllStudentDetailsRow
		if err := rows.Scan(
			&i.StudentEmail,
			&i.StudentName,
			&i.ClassroomId,
			&i.Status,
			&i.ID,
			&i.ID_2,
			&i.Name,
			&i.Email,
			&i.EmailVerified,
			&i.Image,
			&i.Role,
			&i.ID_3,
			&i.RoomNumber,
			&i.TeacherName,
			&i.TeacherId,
			&i.Comment,
			&i.IsFlex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const allStudentsMap = `-- name: AllStudentsMap :many
SELECT "students"."id", "students"."studentEmail", "students"."studentName", "students"."status", "classrooms"."teacherName"
FROM "students"
JOIN "classrooms" ON "students"."classroomId" = "classrooms"."id"
`

type AllStudentsMapRow struct {
	ID           int32
	StudentEmail string
	StudentName  string
	Status       Status
	TeacherName  string
}

func (q *Queries) AllStudentsMap(ctx context.Context) ([]AllStudentsMapRow, error) {
	rows, err := q.db.Query(ctx, allStudentsMap)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllStudentsMapRow
	for rows.Next() {
		var i AllStudentsMapRow
		if err := rows.Scan(
			&i.ID,
			&i.StudentEmail,
			&i.StudentName,
			&i.Status,
			&i.TeacherName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rosterByClassroomId = `-- name: RosterByClassroomId :many
SELECT
  s."id" AS "rosterId",
  s."studentEmail" AS "studentEmail",
  c."id" AS "classroomId",
  c."roomNumber" AS "roomNumber",
  c."teacherName" AS "teacherName",
  c."teacherId" AS "teacherId",
  COALESCE(a."available", FALSE) AS "available" 
FROM "students" s
JOIN "classrooms" c ON s."classroomId" = c."id"
LEFT JOIN "availability" a ON c."id" = a."classroomId" AND a."date" = CURRENT_DATE
WHERE s."classroomId" = $1
`

type RosterByClassroomIdRow struct {
	RosterId     int32
	StudentEmail string
	ClassroomId  string
	RoomNumber   string
	TeacherName  string
	TeacherId    pgtype.Text
	Available    bool
}

func (q *Queries) RosterByClassroomId(ctx context.Context, classroomid string) ([]RosterByClassroomIdRow, error) {
	rows, err := q.db.Query(ctx, rosterByClassroomId, classroomid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RosterByClassroomIdRow
	for rows.Next() {
		var i RosterByClassroomIdRow
		if err := rows.Scan(
			&i.RosterId,
			&i.StudentEmail,
			&i.ClassroomId,
			&i.RoomNumber,
			&i.TeacherName,
			&i.TeacherId,
			&i.Available,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rosterById = `-- name: RosterById :many
SELECT "studentEmail", "studentName", "classroomId", status, id FROM "students" WHERE "id" = $1
`

func (q *Queries) RosterById(ctx context.Context, id int32) ([]Student, error) {
	rows, err := q.db.Query(ctx, rosterById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.StudentEmail,
			&i.StudentName,
			&i.ClassroomId,
			&i.Status,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rosterByTeacherId = `-- name: RosterByTeacherId :many
SELECT "students"."studentEmail", "students"."studentName","students"."status", "user"."id" AS "studentId", "classrooms"."roomNumber", "classrooms"."teacherName", "classrooms"."id" AS "classroomId", "classrooms"."comment"
FROM "students"
JOIN "classrooms" ON "students"."classroomId" = "classrooms"."id"
LEFT JOIN "user" ON "students"."studentEmail" = "user"."email"
WHERE "classrooms"."teacherId" = $1
`

type RosterByTeacherIdRow struct {
	StudentEmail string
	StudentName  string
	Status       Status
	StudentId    pgtype.Text
	RoomNumber   string
	TeacherName  string
	ClassroomId  string
	Comment      pgtype.Text
}

func (q *Queries) RosterByTeacherId(ctx context.Context, teacherid pgtype.Text) ([]RosterByTeacherIdRow, error) {
	rows, err := q.db.Query(ctx, rosterByTeacherId, teacherid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RosterByTeacherIdRow
	for rows.Next() {
		var i RosterByTeacherIdRow
		if err := rows.Scan(
			&i.StudentEmail,
			&i.StudentName,
			&i.Status,
			&i.StudentId,
			&i.RoomNumber,
			&i.TeacherName,
			&i.ClassroomId,
			&i.Comment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rosterQuery = `-- name: RosterQuery :many
SELECT "studentEmail", "studentName", "classroomId", status, id FROM "students"
`

func (q *Queries) RosterQuery(ctx context.Context) ([]Student, error) {
	rows, err := q.db.Query(ctx, rosterQuery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.StudentEmail,
			&i.StudentName,
			&i.ClassroomId,
			&i.Status,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
